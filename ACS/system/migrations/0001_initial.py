# Generated by Django 3.2.16 on 2022-11-20 16:54

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('Id', models.AutoField(primary_key=True, serialize=False, unique=True, verbose_name='职工编号')),
                ('email', models.EmailField(max_length=254, verbose_name='邮箱')),
                ('name', models.CharField(max_length=16, verbose_name='职工姓名')),
                ('kind', models.CharField(choices=[('teacher', '教师'), ('admin', '教秘')], default='教师', max_length=10, verbose_name='用户类别')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='公共教学一楼', max_length=20, verbose_name='教学楼名称')),
            ],
            options={
                'verbose_name': '教学楼信息',
                'verbose_name_plural': '教学楼信息',
                'db_table': 'Buildings',
            },
        ),
        migrations.CreateModel(
            name='Major',
            fields=[
                ('major_name', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='专业名称')),
                ('is_a_big_lei', models.BooleanField(default=False, verbose_name='是否大类')),
            ],
            options={
                'verbose_name': '专业信息',
                'verbose_name_plural': '专业信息',
                'db_table': 'Major_Information',
            },
        ),
        migrations.CreateModel(
            name='major_class',
            fields=[
                ('major_class_id', models.AutoField(primary_key=True, serialize=False, verbose_name='班级编号')),
                ('class_name', models.CharField(max_length=30, verbose_name='班级名称')),
                ('grade', models.PositiveSmallIntegerField(choices=[(1, '2018级'), (2, '2019级'), (3, '2020级'), (4, '2021级'), (5, '2022级')], default=3, verbose_name='年级')),
                ('number', models.IntegerField(default=30, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='班级人数')),
            ],
            options={
                'verbose_name': '班级信息',
                'verbose_name_plural': '班级信息',
                'db_table': 'major_class_Information',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('school_name', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='学院名称')),
            ],
            options={
                'verbose_name': '院系信息',
                'verbose_name_plural': '院系信息',
                'db_table': 'School_Information',
            },
        ),
        migrations.CreateModel(
            name='Source_class',
            fields=[
                ('class_Id', models.AutoField(primary_key=True, serialize=False, unique=True, verbose_name='课程编号')),
                ('class_name', models.CharField(max_length=20, verbose_name='课程名称')),
                ('credit', models.IntegerField(default=2, validators=[django.core.validators.MaxValueValidator(20), django.core.validators.MinValueValidator(1)], verbose_name='学分')),
                ('using', models.BooleanField(verbose_name='当前是否正在使用')),
                ('character', models.PositiveSmallIntegerField(blank=True, choices=[(1, '部类基础'), (2, '部类共同'), (3, '大学体育'), (4, '大学外语'), (5, '法政类'), (6, '发展指导'), (7, '国防教育'), (8, '公共计算机'), (9, '公共数学'), (10, '公共艺术教育'), (11, '管理类'), (12, '个性化选修'), (13, '汉语类课程'), (14, '基本素质'), (15, '经典历史著作阅读'), (16, '经济类'), (17, '集中实践环节'), (18, '跨学科专业选修'), (19, '国际小学期全英文课'), (20, '科研与实践环节'), (21, '理工类'), (22, '全校共同课'), (23, '全校选修'), (24, '人文素质'), (25, '人文艺术类'), (26, '暑期学校'), (27, '思想政治理论课'), (28, '通识核心课'), (29, '通识基础课'), (30, '学科基础'), (31, '学科通识'), (32, '心理健康教育'), (33, '新生研讨课'), (34, '艺术教育'), (35, '应用基础'), (36, '中国概况'), (37, '自然科学'), (38, '专业必修'), (39, '专业核心课'), (40, '专业实习'), (41, '劳动教育'), (42, '职业生涯规划'), (43, '专业基础课'), (44, '专业选修'), (45, '大类共同'), (46, '通识讲座'), (47, '创新研究与实践')], default=39, verbose_name='课程性质')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='school_class_relation', to='system.school', verbose_name='开课院系')),
            ],
            options={
                'verbose_name': '课程库信息',
                'verbose_name_plural': '课程库信息',
                'db_table': 'Source_class',
                'unique_together': {('class_Id',)},
            },
        ),
        migrations.CreateModel(
            name='TC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Week', models.IntegerField(validators=[django.core.validators.MaxValueValidator(20), django.core.validators.MinValueValidator(1)], verbose_name='周次')),
                ('weekday', models.PositiveSmallIntegerField(choices=[(1, '星期一'), (2, '星期二'), (3, '星期三'), (4, '星期四'), (5, '星期五'), (6, '星期六'), (7, '星期日')], default=1)),
                ('jieke', models.PositiveSmallIntegerField(choices=[(1, '第一大节(8:00-9:30)'), (2, '第二大节(10:00-11:30)'), (3, '第三大节(12:00-13:30)'), (4, '第四大节(14:00-15:30)'), (5, '第五大节(16:00-17:30)'), (6, '第六大节(18:00-19:30)'), (7, '第七大节(19:40-21:10)')], default=1)),
            ],
            options={
                'verbose_name': '上课时间信息',
                'verbose_name_plural': '上课时间信息',
                'db_table': 'Time_Information',
                'unique_together': {('Week', 'weekday', 'jieke')},
            },
        ),
        migrations.CreateModel(
            name='training_program',
            fields=[
                ('program_Id', models.AutoField(primary_key=True, serialize=False, verbose_name='培养方案编号')),
                ('program_name', models.CharField(max_length=30, verbose_name='培养方案名称')),
                ('grade', models.PositiveSmallIntegerField(choices=[(1, '2018级'), (2, '2019级'), (3, '2020级'), (4, '2021级'), (5, '2022级')], default=3, verbose_name='年级')),
                ('major', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='major_program_relation', to='system.major', verbose_name='专业对应培养方案')),
                ('school', models.ManyToManyField(to='system.School', verbose_name='培养方案所属学院')),
            ],
            options={
                'verbose_name': '专业培养方案信息',
                'verbose_name_plural': '专业培养方案信息',
                'db_table': 'training_program',
            },
        ),
        migrations.CreateModel(
            name='teaching_class',
            fields=[
                ('teaching_class_id', models.AutoField(primary_key=True, serialize=False, verbose_name='教学班id')),
                ('planned_number', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(500), django.core.validators.MinValueValidator(0)], verbose_name='计划修读人数')),
                ('true_number', models.IntegerField(default=0, verbose_name='开课面向人数（即授课对象的人数之和）')),
                ('source_class1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teaching_class_source_class', to='system.source_class', verbose_name='教学班对应课程')),
                ('students', models.ManyToManyField(blank=True, null=True, to='system.major_class', verbose_name='授课对象')),
            ],
            options={
                'verbose_name': '教学班信息',
                'verbose_name_plural': '教学班信息',
                'db_table': 'teaching_class',
            },
        ),
        migrations.CreateModel(
            name='Teacher_Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '教职工信息',
                'verbose_name_plural': '教职工信息',
                'db_table': 'Teacher_Information',
            },
        ),
        migrations.AddField(
            model_name='major_class',
            name='program',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='class_belong_to_programe', to='system.training_program', verbose_name='班级所属培养方案'),
        ),
        migrations.AddField(
            model_name='major_class',
            name='school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='class_belong_school', to='system.school', verbose_name='班级所属院系'),
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('classroom_id', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='教室编号')),
                ('is_engine_room', models.BooleanField(default=False, verbose_name='是否机房')),
                ('Capacity', models.IntegerField(default=0, verbose_name='教室容量')),
                ('place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location', to='system.building', verbose_name='教室所在教学楼')),
            ],
            options={
                'verbose_name': '教室信息',
                'verbose_name_plural': '教室信息',
                'db_table': 'Classroom',
            },
        ),
        migrations.CreateModel(
            name='Ad_Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '教务处秘书信息',
                'verbose_name_plural': '教务处秘书信息',
                'db_table': 'Admin_Information',
            },
        ),
        migrations.AddField(
            model_name='myuser',
            name='school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teacher_school', to='system.school', verbose_name='职工所属学院'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='teaching_class_teacher_time_assignment',
            fields=[
                ('tc_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='system.tc')),
                ('relation_id', models.AutoField(primary_key=True, serialize=False, verbose_name='教学班_教师_时间关系')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teaching_class_teacher_relation', to='system.teacher_info', verbose_name='教学班对应老师')),
                ('teaching_class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relation_teachingid2', to='system.teaching_class', verbose_name='教学班')),
            ],
            options={
                'verbose_name': '教学班-教师-时间关系',
                'verbose_name_plural': '教学班-教师-时间关系',
            },
            bases=('system.tc',),
        ),
        migrations.CreateModel(
            name='teaching_class_classroom_time_assignment',
            fields=[
                ('tc_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='system.tc')),
                ('relation_id', models.AutoField(primary_key=True, serialize=False, verbose_name='关系编号')),
                ('classroom_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='relation_classroomid', to='system.classroom', verbose_name='教学班使用的教室')),
                ('teaching_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relation_teachingid', to='system.teaching_class', verbose_name='教学班')),
            ],
            options={
                'verbose_name': '教学班-使用教室-时间关系',
                'verbose_name_plural': '教学班-使用教室-时间关系',
            },
            bases=('system.tc',),
        ),
    ]
