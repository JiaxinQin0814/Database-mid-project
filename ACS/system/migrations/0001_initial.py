# Generated by Django 3.2.16 on 2022-11-27 14:58

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('identifier', models.AutoField(primary_key=True, serialize=False, unique=True, verbose_name='职工编号')),
                ('email', models.EmailField(max_length=254, verbose_name='邮箱')),
                ('username', models.CharField(max_length=16, verbose_name='职工姓名')),
                ('kind', models.CharField(choices=[('teacher', '教师'), ('admin', '教秘')], default='教师', max_length=10, verbose_name='用户类别')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='公共教学一楼', max_length=20, verbose_name='教学楼名称')),
            ],
            options={
                'verbose_name': '教学楼信息',
                'verbose_name_plural': '教学楼信息',
                'db_table': 'Buildings',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True, verbose_name='课程编号')),
                ('name', models.CharField(max_length=20, verbose_name='课程名称')),
                ('credit', models.IntegerField(default=2, validators=[django.core.validators.MaxValueValidator(20), django.core.validators.MinValueValidator(1)], verbose_name='学分')),
                ('using', models.BooleanField(verbose_name='当前是否正在使用')),
                ('nature', models.TextField(blank=True, choices=[('部类基础', '部类基础'), ('部类共同', '部类共同'), ('大学体育', '大学体育'), ('大学外语', '大学外语'), ('法政类', '法政类'), ('发展指导', '发展指导'), ('国防教育', '国防教育'), ('公共计算机', '公共计算机'), ('公共数学', '公共数学'), ('公共艺术教育', '公共艺术教育'), ('管理类', '管理类'), ('个性化选修', '个性化选修'), ('汉语类课程', '汉语类课程'), ('基本素质', '基本素质'), ('经典历史著作阅读', '经典历史著作阅读'), ('经济类', '经济类'), ('集中实践环节', '集中实践环节'), ('跨学科专业选修', '跨学科专业选修'), ('国际小学期全英文课', '国际小学期全英文课'), ('科研与实践环节', '科研与实践环节'), ('理工类', '理工类'), ('全校共同课', '全校共同课'), ('全校选修', '全校选修'), ('人文素质', '人文素质'), ('人文艺术类', '人文艺术类'), ('暑期学校', '暑期学校'), ('思想政治理论课', '思想政治理论课'), ('通识核心课', '通识核心课'), ('专业核心课', '专业核心课'), ('专业实习', '专业实习'), ('劳动教育', '劳动教育'), ('职业生涯规划', '职业生涯规划'), ('专业基础课', '专业基础课'), ('专业选修', '专业选修'), ('大类共同', '大类共同'), ('通识讲座', '通识讲座'), ('创新研究与实践', '创新研究与实践'), ('通识基础课', '通识基础课'), ('学科基础', '学科基础'), ('学科通识', '学科通识'), ('心理健康教育', '心理健康教育'), ('新生研讨课', '新生研讨课'), ('艺术教育', '艺术教育'), ('应用基础', '应用基础'), ('中国概况', '中国概况'), ('自然科学', '自然科学'), ('专业必修', '专业必修')], default='专业核心课', verbose_name='课程性质')),
            ],
            options={
                'verbose_name': '课程库信息',
                'verbose_name_plural': '课程库信息',
                'db_table': 'Course',
            },
        ),
        migrations.CreateModel(
            name='Major',
            fields=[
                ('name', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='专业名称')),
                ('is_a_big_lei', models.BooleanField(default=False, verbose_name='是否大类')),
            ],
            options={
                'verbose_name': '专业',
                'verbose_name_plural': '专业',
                'db_table': 'Major',
            },
        ),
        migrations.CreateModel(
            name='MajorClass',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='编号')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='名称')),
                ('size', models.IntegerField(default=30, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='人数')),
            ],
            options={
                'verbose_name': '专业班级',
                'verbose_name_plural': '专业班级',
                'db_table': 'MajorClass',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('school_name', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='学院名称')),
            ],
            options={
                'verbose_name': '学院',
                'verbose_name_plural': '学院',
                'db_table': 'School',
            },
        ),
        migrations.CreateModel(
            name='TC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Week', models.IntegerField(validators=[django.core.validators.MaxValueValidator(20), django.core.validators.MinValueValidator(1)], verbose_name='周次')),
                ('weekday', models.PositiveSmallIntegerField(choices=[(1, '星期一'), (2, '星期二'), (3, '星期三'), (4, '星期四'), (5, '星期五'), (6, '星期六'), (7, '星期日')], default=1)),
                ('jie_ci', models.PositiveSmallIntegerField(choices=[(1, '第一大节(8:00-9:30)'), (2, '第二大节(10:00-11:30)'), (3, '第三大节(12:00-13:30)'), (4, '第四大节(14:00-15:30)'), (5, '第五大节(16:00-17:30)'), (6, '第六大节(18:00-19:30)'), (7, '第七大节(19:40-21:10)')], default=1)),
            ],
            options={
                'verbose_name': '上课时间信息',
                'verbose_name_plural': '上课时间信息',
                'db_table': 'Time_Information',
                'unique_together': {('Week', 'weekday', 'jie_ci')},
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '教师',
                'verbose_name_plural': '教师',
                'db_table': 'Teacher',
            },
        ),
        migrations.CreateModel(
            name='TeachingClass',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='教学班编号')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='名称')),
                ('planned_size', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(500), django.core.validators.MinValueValidator(0)], verbose_name='计划修读人数')),
                ('actual_size', models.IntegerField(default=0, verbose_name='实际修读人数')),
                ('source_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teaching_class_source_class', to='system.course', verbose_name='课程')),
                ('students', models.ManyToManyField(blank=True, null=True, to='system.MajorClass', verbose_name='授课对象')),
            ],
            options={
                'verbose_name': '教学班',
                'verbose_name_plural': '教学班',
                'db_table': 'TeachingClass',
            },
        ),
        migrations.CreateModel(
            name='TeacherMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_message', models.TextField(max_length=300, verbose_name='反馈的信息')),
                ('feedback_time', models.TimeField(auto_now_add=True, verbose_name='反馈时间')),
                ('status', models.BooleanField(default=False, verbose_name='已处理')),
                ('teacher_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_message_connect', to='system.teacher', verbose_name='反馈信息的教师')),
            ],
            options={
                'verbose_name': '教师信息反馈表',
                'verbose_name_plural': '教师信息反馈表',
            },
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='编号')),
                ('name', models.CharField(max_length=30, verbose_name='名称')),
                ('grade', models.PositiveSmallIntegerField(choices=[(1, '2018级'), (2, '2019级'), (3, '2020级'), (4, '2021级'), (5, '2022级')], default=3, verbose_name='年级')),
                ('major', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='major_program_relation', to='system.major', verbose_name='专业')),
                ('school', models.ManyToManyField(to='system.School', verbose_name='学院')),
            ],
            options={
                'verbose_name': '培养方案',
                'verbose_name_plural': '培养方案',
                'db_table': 'program',
            },
        ),
        migrations.AddField(
            model_name='majorclass',
            name='program',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='class_belong_program', to='system.program', verbose_name='所属培养方案'),
        ),
        migrations.CreateModel(
            name='CourseHistory',
            fields=[
                ('history_id', models.AutoField(primary_key=True, serialize=False, unique=True, verbose_name='修改记录编号')),
                ('new_class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='new_class_id', to='system.course', verbose_name='修改后的课程编号')),
                ('old_class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='old_class_id', to='system.course', verbose_name='修改前的课程编号')),
            ],
            options={
                'verbose_name': '课程库修改历史',
                'verbose_name_plural': '课程库修改历史',
                'db_table': 'ClassHistory',
            },
        ),
        migrations.AddField(
            model_name='course',
            name='school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='school_class_relation', to='system.school', verbose_name='开课院系'),
        ),
        migrations.CreateModel(
            name='Classroom',
            fields=[
                ('classroom_id', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='教室编号')),
                ('is_engine_room', models.BooleanField(default=False, verbose_name='是否机房')),
                ('Capacity', models.IntegerField(default=0, verbose_name='教室容量')),
                ('place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location', to='system.building', verbose_name='教室所在教学楼')),
            ],
            options={
                'verbose_name': '教室信息',
                'verbose_name_plural': '教室信息',
                'db_table': 'Classroom',
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '教务处秘书',
                'verbose_name_plural': '教务处秘书',
                'db_table': 'Admin',
            },
        ),
        migrations.AddField(
            model_name='myuser',
            name='school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teacher_school', to='system.school', verbose_name='职工所属学院'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='TeacherScheduling',
            fields=[
                ('tc_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='system.tc')),
                ('ts_id', models.AutoField(primary_key=True, serialize=False, verbose_name='编号')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ts_teacher', to='system.teacher', verbose_name='授课老师')),
                ('teaching_class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ts_teaching_class_id', to='system.teachingclass', verbose_name='教学班编号')),
            ],
            options={
                'verbose_name': '教师排课信息',
                'verbose_name_plural': '教师排课信息',
                'db_table': 'TeacherScheduling',
            },
            bases=('system.tc',),
        ),
        migrations.CreateModel(
            name='Scheduling',
            fields=[
                ('tc_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='system.tc')),
                ('s_id', models.AutoField(primary_key=True, serialize=False, verbose_name='排课编号')),
                ('classroom_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='s_classroom_id', to='system.classroom', verbose_name='教室')),
                ('teaching_class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='s_teaching_class_id', to='system.teachingclass', verbose_name='教学班编号')),
            ],
            options={
                'verbose_name': '排课信息',
                'verbose_name_plural': '排课信息',
                'db_table': 'Scheduling',
            },
            bases=('system.tc',),
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together={('id',)},
        ),
    ]
